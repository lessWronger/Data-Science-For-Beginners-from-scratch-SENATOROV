# %% [markdown]
# """cpython issue."""
#
# 1. Что такое CPython и чем он отличается от Python?
#     Python — это язык программирования. Он описан в виде спецификации (синтаксис, ключевые слова, правила выполнения)
#     CPython — это официальная реализация Python, написанная на языке C. CPython - именно интерпретатор, который выполняет код Python.
#
# 2. Сколько существует реализаций Python, и какая из них самая популярная?
#     6, CPython
#
# 3. На каком языке написан CPython?
#     На С
#
# 4. (опционально)   Кто создал CPython?
#     Гвидо ван Россум
#
# 5. Почему Python считается быстрым, несмотря на то, что это интерпретируемый язык?
#     Питон вызывает инструкции из языка С и код выполняется не напрямую в машинных инструкциях, а через интерпретатор (CPython). Скорость как раз таки обуславливается ядром на языке С. Это позволяет писать код быстрее и проще, ведь «тяжёлая работа» уходит на оптимизированном коде C
#
# 6. Напишите путь к Интерпретатору CPython на вашем компьютере
#     /usr/bin/python3 - системный
#     /Users/a123/miniconda3/envs/ml-env/bin/python3 - окружения
#
# 7. Что содержится в папке include в CPython?
#     Файлы для разработки и сборки С-расширений для PYTHON
#
# 8. Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
#     https://github.com/python/cpython
#
# 9. (опционально) Как работает интерпретатор CPython при выполнении кода?
#     Сначала Python-код компилируется в байткод, затем интерпретатор CPython построчно выполняет этот байткод с помощью виртуальной машины, написанной на C.
#     CPython работает в 3 этапа:
#        1. Лексический анализ и парсинг преобразует исходный код в AST (Abstract Syntax Tree).
#        2. Компиляция в байт-код - AST компилируется в .pyc файлы (байт-код).
#        3. Интерпретация байт-кода - виртуальная машина CPython (PVM) выполняет байт-код построчно.
#     В отличие от PyPy, CPython не использует JIT-компиляцию — поэтому он медленнее, но стабильнее и совместимее
# 10. Какая команда используется для запуска файла с помощью CPython?
#     python имя_файла.py
#
# 11. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
#     Можно. Интерпретатору Python не важно расширение файла. Он просто читает содержимое файла построчно и выполняет как код на Python.
#
# 12. Как указать путь к интерпретатору и файлу для выполнения кода?
#     <путь_к_интерпретатору> <путь_к_файлу>
#     например
#     /usr/bin/python3 /Users/a123/projects/example.py
#
# 13. Чем PyPy отличается от CPython?
#     Скоростью работы, однако он достаточно новый и не совместим с некоторыми проектами
#
# 14. Почему PyPy не может использоваться для всех проектов на Python?
#     Он достаточно новый и не совместим с некоторыми проектами
#
# 15. Где можно скачать PyPy
#     htttps://pypy.org
#
# 16. Как установить PyPy после скачивания?
#     Распаковать архив с интерпретатором, запустить интерпретатор, опционально: добавить PyPy в переменные окружения и пользоваться напрямую из рабочего окружения через команду pypy адрес_файла
#
# 17. Как запустить файл с помощью PyPy?
#     "путь до интерпретатора pypy" "путь до файла с текстом(не обязательно .py)"
#
# 18. Почему PyPy выполняет код быстрее, чем CPython?
#     благодаря JIT-компиляции (Just-In-Time compilation)
#
# Задание 1: Поиск и установка CPython
#     Python 3.12.11
#
# Задание 2: Исследование структуры CPython
#     74 .h файла
#
# Задание 3: Запуск файла с помощью CPython
#     для интерпетатора без раразницы .txt или .py — он читает содержимое файла
#
# Задание 4: Установка и использование PyPy
#     выводит "Hello from pypy!" не зависимо от расширения
#
# Задание 5: Сравнение производительности CPython и PyPy Запустите этот файл сначала через CPython, а затем через PyPy. Запишите результаты времени выполнения для обоих интерпретаторов. Сделайте вывод о разнице в производительности.
#
#     cpython
#     Result: 49999995000000
#     Execution time: 0.6001999378204346 seconds
#     pypy
#     Result: 49999995000000
#     Execution time: 0.0096315717712423 seconds
#
# Разница в производительности, около 60 раз
