# + [markdown]
# """issues"""
# Общие вопросы
#
# 1. Что такое Issues на GitHub и для чего они используются?
#     Это встроенный инструмент GitHub для управления задачами: баги, фичи, обсуждения. Используются для прозрачного ведения работы в проекте.
# 2. Чем Issues отличаются от других инструментов управления задачами?
#     Привязаны к коду (репозиторию).
# 	Интегрируются с Pull Requests, коммитами, Actions.
# 	Минималистичные и бесплатные, но не такие «тяжёлые» как Jira или Trello.
# 3. Какие основные компоненты (поля) есть у каждого Issue?
#     Заголовок (Title) - вводим, кратко информацию о ситуации/проблеме
# 	Описание (Description) вводим информацию о нашей проблеме
# 	Labels (метки) - флаг(тема ишьюса, bug и т.п)
# 	Assignees (ответственные)
# 	Milestone (веха) - привязка к дедлайну
# 	Ссылки на PR, коммиты, другие Issues.
#
# Создание Issues
#
# 4. Как создать новое Issue в репозитории?
#     Вкладка Issues - New issue - заполнить Title и Description - Submit.
# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
#     Как правило указывается файл с участком кода, который непонятен или содержит ошибку
# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
#     Стандартные: bug, documentation, enhancement, help wanted, question.
# 7. Как прикрепить Assignees (ответственных) к Issue?
#     В поле Assignees нужно просто нажать и появится список тех кого можно сделать отвественными
#
# Работа с Issues
#
# 8. Как использовать Labels для классификации задач?
#     По типу темы issues подбирается тег классификации
# 9. Для чего нужен Milestone, и как связать его с Issue?
#     Для привязки issue к времени, чтобы связать его с issue надо просто нажать на поле milestone и выбрать срок
# 10. Как привязать Issue к пул-реквесту (Pull Request)?
#     В описании PR указать Closes #номер_issue или Fixes #номер_issue. После мерджа PR Issue закроется автоматически
# 11. Как добавить комментарий к существующему Issue?
#     Перейти сверху во вкладку Issues и выбрать нужный, ниже add a comment
#
# Закрытие и завершение Issues
#
# 12. Как закрыть Issue вручную?
#     Во вкладке issues сверху перейти на нужный issue и закрыть вручную
# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
#     Через коммит - нужно написать в title #(номер ошибки), а в description closes #(номер ошибки)
# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
#    В закрытом issue кнопка Reopen issue
#
# Фильтрация и поиск
#
# 15. Как найти все открытые или закрытые Issues в репозитории?
#     во вкладке Issue в поиске будет 'Open', 'Closed'
# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
#     1. По лейблам выполнить поиск проблемы: bag, duplicate и т.п.
#     2. По авторам, кто работал над issue
#     3. По времени(milestones) - указать дату, когда работали над проблемой
# 17. Как сортировать Issues по приоритету, дате создания или другим параметрам?
#     В Issues будут соответсвующие вклади: author, labels, project и т.п
#
# Интеграции и автоматизация
#
# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
#     Через настройка Watch в репозитории: полные/только участия/игнорировать
# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
#     GitHub Projects — это встроенный инструмент для планирования и организации работы. Он работает как наглядная таблица (Kanban/таблица), где можно собирать задачи из Issues и Pull Requests
# 20. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
#     Probot (боты для GitHub), Zapier, IFTTT (автоматизация), ZenHub, Linear, Jira (более продвинутый трекинг), чтобы автоматизровать работу с issues
#
# Коллаборация
#
# 21. Как упомянуть другого пользователя в комментарии к Issue?
#     Через @username в комментарии.
# 22. Как запросить дополнительные данные или уточнения у автора Issue?
#     Комментарий с вопросами, можно назначить автора в Assignees.
# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
# 	Закрыть с комментарием issue или обьедитить его с другим с помощью duplicate
#
# Практические аспекты
#
# 24. Как использовать шаблоны для создания Issues?
#     В репозитории создать .github/ISSUE_TEMPLATE/. или добавить bug_report.md, feature_request.md, и тогда новые разработчики будут придерживаться этого шаблона
# 25. Что такое Linked Issues, и как создать связь между задачами?
#     Создается связь через интерфейс - в разделе linked issue и там будут три типа связи,is blocked by - данная задача ждет другую, blocks - данная задача блокирует другую, relates to - обычная связь без блокировки
# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
# 	Время открытия/закрытия
# 	Кол-во комментариев
# 	Кол-во открытых/закрытых задач по milestone
# 27. Какие best practices рекомендуются при работе с Issues в команде?
#     1. Писать issues по шаблону
#     2. Подробно описывать ситуацию/проблему
#     3. Уведомлять об открытии/закрытии
#     4. Давать обратную связь по выполненной работе
