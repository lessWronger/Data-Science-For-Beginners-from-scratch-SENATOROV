# %% [markdown]
# """Issue Open Source."""
# 1. GitHub
#
# 1.1. Что такое GitHub?
#     GitHub — это онлайн-платформа, которая позволяет хранить, управлять и совместно разрабатывать проекты, используя систему контроля версий Git. Это место, где код живёт и развивается вместе с командой.
#
# 1.2. Как GitHub связан с Git?
#     Git — инструмент для локального управления версиями на вашем компьютере. GitHub же — облачный сервис, который хранит репозитории Git и даёт возможность командам работать над кодом вместе через интернет.
#
# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
#     Fork — это копия чужого репозитория, создаваемая на вашем GitHub-аккаунте. Он нужен, чтобы вы могли внести изменения и предложить их обратно автору проекта.
#     Clone делает копию репозитория на вашем компьютере для локальной работы.
#
# 1.4. Зачем нужны и как работают pull requests?
#     Pull request (PR) — это запрос на внесение изменений из вашей ветки в основную ветку проекта. Через него проходит проверка, обсуждение и утверждение кода до слияния.
#
# 1.5. GitHub использует ваш почтовый адрес для привязки ваших Git-коммитов к вашей учётной записи?
#     Да. GitHub определяет, кому принадлежат коммиты, по email-адресу, указанному в настройках Git. Этот адрес должен быть подтверждён в вашем профиле GitHub.
#
# 1.6. Какая команда генерирует SSH-ключ для доступа по SSH к репозиторию?
#     ssh-keygen
#
# 2. Запросы на слияние
# 2.1. https://github.com/lessWronger/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
# 2.2. https://github.com/lessWronger/Data-Science-For-Beginners-from-scratch-SENATOROV/tree/dev
# 2.3. выполнено
# 2.4. #435
# 2.5. Выполнено
# 2.6. https://github.com/lessWronger/Data-Science-For-Beginners-from-scratch-SENATOROV/pull/1
# 2.7. https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/issues?q=state%3Aclosed%20label%3Aenhancement
# 2.8. https://github.com/SENATOROVAI/Data-Science-For-Beginners-from-scratch-SENATOROV/commit/fb107e0ce340e616c8e93298b2a851b03d890c49
# 2.9.
#
# 3. Как внести вклад в чужой проект (8 шагов)
# 	1.	Найти подходящий issue.
# 	2.	Сделать fork репозитория.
# 	3.	Клонировать свой fork.
# 	4.	Создать новую ветку.
# 	5.	Внести изменения.
# 	6.	Протестировать код.
# 	7.	Отправить Pull Request.
# 	8.	Участвовать в обсуждении.
#
# 3.1. Какие практики соблюдать при создании Pull Request, чтобы автоматически закрыть issue?
#     В описании PR добавьте фразу Fixes #номер или Closes #номер — GitHub сам закроет issue после слияния.
#
# 3.2. Какие практики соблюдать при создании commit, чтобы закрыть issue автоматически?
#     В сообщении коммита укажите fixes #номер — при слиянии ветки GitHub закроет связанный issue.
#
# 3.3. Как отклонить или закрыть Pull Request?
#     В сообщении коммита укажите fixes #номер — при слиянии ветки GitHub закроет связанный issue.
#
# 3.4. Нужно ли создавать issue перед отправкой Pull Request?
#     На странице PR нажать кнопку “Close pull request”.
#
# 3.5. Где посмотреть список изменений, внесённых в Pull Request?
#     Не обязательно, но это хороший тон — помогает команде заранее понять контекст изменений.
#
# 3.6. Где находится страница обсуждений Pull Request?
#     Во вкладке Files changed — там видно, какие файлы и строки были изменены.
#
# 3.7. Где проходят обсуждения PR?
#     Во вкладке Conversation — там участники проекта обсуждают детали и оставляют комментарии.
#
# 4. Создание запроса на слияние
#
# 4.1. Можно ли открыть Pull Request, если вы ничего не вносили в fork?
#     Нет, GitHub не позволит — нужно внести хотя бы одно изменение.
#
# 4.2. Что нужно сделать, чтобы открыть Pull Request?
#     После коммита нажать “Compare & pull request”, выберите ветку и добавьте описание.
#
# 4.3. Что делать, если ваш fork устарел?
#     Обновить его через “Fetch upstream” или с помощью команды git fetch upstream && git merge upstream/main.
#
# 4.4. Что делать, если есть конфликты слияния?
#     Разрешить их вручную локально, затем снова запушить исправленный код.
#
# 5. Работа с комментариями и кодом
#
# 5.1. Как добавить отрывок кода в комментарий к issue?
#     Для одной строки используйте обратные кавычки: `код`. Для блока кода — три кавычки до и после блока.
#
# 5.2. Как сделать цитату в комментарии?
#     Выделить нужный текст и нажмите R — GitHub вставит цитату со знаком >. Либо используйте сочетание Ctrl/Cmd + Shift + .
#
# 5.3. Как вставить картинку в issue?
#     Перетащить файл мышкой в поле комментария или Вставить из буфера обмена — GitHub автоматически создаст Markdown-ссылку на изображение.
#
# 6. Поддержание актуальности fork
#
# 6.1. Как понять, что ваш fork устарел?
#     GitHub покажет сообщение “This branch is X commits behind” или предложит кнопку Fetch upstream.
#
# 6.2. Как обновить fork?
#     На странице форка нажать Fetch upstream → Fetch and merge. Изменения из оригинального репозитория подтянутся в ваш.
#
# 7. Добавление участников
#     Чтобы добавить коллег к работе над репозиторием необходимо:
#     перейти в Settings → Access → Collaborators & teams, нажать Add people, ввести логин пользователя, выбрать роль (например, Write) и отправить приглашение.
#
# 8. Упоминания и уведомления
#
# 8.1. Как упомянуть другого пользователя?
#     Использовать символ @, например @username.
#
# 8.2. Где находится центр уведомлений?
#     По адресу: https://github.com/notifications
#
# 9. Особенные файлы
#
# 9.1. Что такое и зачем нужен файл README?
#     README.md — основной файл с описанием проекта. Он объясняет назначение, установку, примеры и авторов. GitHub отображает его на главной странице.
#
# 9.2. Что такое файл CONTRIBUTING?
#     CONTRIBUTING.md содержит правила и инструкции для контрибьюторов — как писать код, делать коммиты, оформлять PR и проходить ревью.
#
# 10. Управление проектом
#
# 10.1. Как изменить основную ветку?
#     В разделе Settings → Default branch выбрать новую ветку и нажать Update.
#
# 10.2. Как передать проект другому владельцу?
#     В Settings → Options → Danger Zone → Transfer ownership, указать имя нового владельца и подтвердить действие.
#
# 10.3. Что такое файл .gitignore?
#     .gitignore — файл, в котором указано, какие файлы и папки Git должен игнорировать (например, временные файлы, кэш, сборки, секреты и конфиги IDE).
